
// Code generated by generate_calls.rs, DO NOT EDIT.
use crate::client::DerivClient;
use crate::error::Result;
use deriv_api_schema::*;
use crate::subscription::Subscription;

impl DerivClient {

/// Creates a P2P order for the specified advert.
pub async fn p_2_p_order_create(&self, request: deriv_api_schema::P2pOrderCreateRequest) -> Result<deriv_api_schema::P2pOrderCreateResponse> {
    self.send_request(&request).await
}

/// It unsubscribe user from the email subscription.
pub async fn unsubscribe_email(&self, request: deriv_api_schema::UnsubscribeEmailRequest) -> Result<deriv_api_schema::UnsubscribeEmailResponse> {
    self.send_request(&request).await
}

/// Creates a P2P (Peer to Peer) advert. Can only be used by an approved P2P advertiser.
pub async fn p_2_p_advert_create(&self, request: deriv_api_schema::P2pAdvertCreateRequest) -> Result<deriv_api_schema::P2pAdvertCreateResponse> {
    self.send_request(&request).await
}

/// Manage or list P2P advertiser payment methods.
pub async fn p_2_p_advertiser_payment_methods(&self, request: deriv_api_schema::P2pAdvertiserPaymentMethods) -> Result<deriv_api_schema::P2pAdvertiserPaymentMethods> {
    self.send_request(&request).await
}

/// Retrieve performance, trading, risk and copiers statistics of trader.
pub async fn copytrading_statistics(&self, request: deriv_api_schema::CopytradingStatisticsRequest) -> Result<deriv_api_schema::CopytradingStatisticsResponse> {
    self.send_request(&request).await
}

/// Request the cashier info for the specified type.
pub async fn cashier(&self, request: deriv_api_schema::CashierRequest) -> Result<deriv_api_schema::CashierResponse> {
    self.send_request(&request).await
}

/// Cancel contract with contract id
pub async fn cancel(&self, request: deriv_api_schema::CancelRequest) -> Result<deriv_api_schema::CancelResponse> {
    self.send_request(&request).await
}

/// Payment Agent Transfer - this call is available only to accounts that are approved Payment Agents.
pub async fn paymentagent_transfer(&self, request: deriv_api_schema::PaymentagentTransferRequest) -> Result<deriv_api_schema::PaymentagentTransferResponse> {
    self.send_request(&request).await
}

/// Subscribe to transaction notifications
pub async fn transaction(&self, request: deriv_api_schema::TransactionRequest) -> Result<deriv_api_schema::TransactionResponse> {
    self.send_request(&request).await
}

/// Request server config.
pub async fn website_config(&self, request: deriv_api_schema::WebsiteConfigRequest) -> Result<deriv_api_schema::WebsiteConfigResponse> {
    self.send_request(&request).await
}

/// Keeps the connection alive and updates the P2P advertiser&#x27;s online status. The advertiser will be considered offline 60 seconds after a call is made.
pub async fn p_2_p_ping(&self, request: deriv_api_schema::P2pPingRequest) -> Result<deriv_api_schema::P2pPingResponse> {
    self.send_request(&request).await
}

/// Reset the investor password of a Trading Platform Account
pub async fn trading_platform_investor_password_reset(&self, request: deriv_api_schema::TradingPlatformInvestorPasswordResetRequest) -> Result<deriv_api_schema::TradingPlatformInvestorPasswordResetResponse> {
    self.send_request(&request).await
}

/// Sell a Contract as identified from a previous &#x60;portfolio&#x60; call.
pub async fn sell(&self, request: deriv_api_schema::SellRequest) -> Result<deriv_api_schema::SellResponse> {
    self.send_request(&request).await
}

/// To reset the password of MT5 account.
pub async fn mt_5_password_reset(&self, request: deriv_api_schema::Mt5PasswordResetRequest) -> Result<deriv_api_schema::Mt5PasswordResetResponse> {
    self.send_request(&request).await
}

/// Returns all P2P adverts created by the authorized client. Can only be used by a registered P2P advertiser.
pub async fn p_2_p_advertiser_adverts(&self, request: deriv_api_schema::P2pAdvertiserAdvertsRequest) -> Result<deriv_api_schema::P2pAdvertiserAdvertsResponse> {
    self.send_request(&request).await
}

/// Returns available adverts for use with &#x60;p2p_order_create&#x60; .
pub async fn p_2_p_advert_list(&self, request: deriv_api_schema::P2pAdvertListRequest) -> Result<deriv_api_schema::P2pAdvertListResponse> {
    self.send_request(&request).await
}

/// Buy a Contract for multiple Accounts specified by the &#x60;tokens&#x60; parameter. Note, although this is an authorized call, the contract is not bought for the authorized account.
pub async fn buy_contract_for_multiple_accounts(&self, request: deriv_api_schema::BuyContractForMultipleAccountsRequest) -> Result<deriv_api_schema::BuyContractForMultipleAccountsResponse> {
    self.send_request(&request).await
}

/// To send the ping request to the server. Mostly used to test the connection or to keep it alive.
pub async fn ping(&self, request: deriv_api_schema::PingRequest) -> Result<deriv_api_schema::PingResponse> {
    self.send_request(&request).await
}

/// This call initiates the state machine for account creation process
pub async fn partner_account_creation(&self, request: deriv_api_schema::PartnerAccountCreationRequest) -> Result<deriv_api_schema::PartnerAccountCreationResponse> {
    self.send_request(&request).await
}

/// Update the information of the P2P advertiser for the current account. Can only be used by an approved P2P advertiser.
pub async fn p_2_p_advertiser_update(&self, request: deriv_api_schema::P2pAdvertiserUpdateRequest) -> Result<deriv_api_schema::P2pAdvertiserUpdateResponse> {
    self.send_request(&request).await
}

/// When a virtual-money&#x27;s account balance becomes low, it can be topped up using this call.
pub async fn topup_virtual(&self, request: deriv_api_schema::TopupVirtualRequest) -> Result<deriv_api_schema::TopupVirtualResponse> {
    self.send_request(&request).await
}

/// A message with Partner Settings
pub async fn partner_settings_update(&self, request: deriv_api_schema::PartnerSettingsUpdateRequest) -> Result<deriv_api_schema::PartnerSettingsUpdateResponse> {
    self.send_request(&request).await
}

/// Initiate a continuous stream of spot price updates for a group symbols.
pub async fn ticks_batch(&self, request: deriv_api_schema::TicksBatchRequest) -> Result<deriv_api_schema::TicksBatchResponse> {
    self.send_request(&request).await
}

/// For a given country, returns a list of States of that country. This is useful to populate the account opening form.
pub async fn states_list(&self, request: deriv_api_schema::StatesListRequest) -> Result<deriv_api_schema::StatesListResponse> {
    self.send_request(&request).await
}

/// Sell contracts for multiple accounts simultaneously. Uses the shortcode response from &#x60;buy_contract_for_multiple_accounts&#x60; to identify the contract, and authorisation tokens to select which accounts to sell those contracts on. Note that only the accounts identified by the tokens will be affected. This will not sell the contract on the currently-authorised account unless you include the token for the current account.
pub async fn sell_contract_for_multiple_accounts(&self, request: deriv_api_schema::SellContractForMultipleAccountsRequest) -> Result<deriv_api_schema::SellContractForMultipleAccountsResponse> {
    self.send_request(&request).await
}

/// This call allows transfers between accounts held by a given user. Transfer funds between your fiat and cryptocurrency accounts (for a fee). Please note that account_from should be same as current authorized account.
pub async fn transfer_between_accounts(&self, request: deriv_api_schema::TransferBetweenAccountsRequest) -> Result<deriv_api_schema::TransferBetweenAccountsResponse> {
    self.send_request(&request).await
}

/// Get User Settings (email, date of birth, address etc)
pub async fn get_settings(&self, request: deriv_api_schema::GetSettingsRequest) -> Result<deriv_api_schema::GetSettingsResponse> {
    self.send_request(&request).await
}

/// Initiate a continuous stream of spot price updates for a given symbol.
pub async fn ticks(&self, request: deriv_api_schema::TicksRequest) -> Result<deriv_api_schema::TicksResponse> {
    self.send_request(&request).await
}

/// This call gets the financial assessment questionnaire structure, which defines the questions, possible answers, and flow logic for the financial assessment form.
pub async fn financial_assessment_questions(&self, request: deriv_api_schema::FinancialAssessmentQuestionsRequest) -> Result<deriv_api_schema::FinancialAssessmentQuestionsResponse> {
    self.send_request(&request).await
}

/// Provide justification to perform withdrawal using a Payment Agent.
pub async fn paymentagent_withdraw_justification(&self, request: deriv_api_schema::PaymentagentWithdrawJustificationRequest) -> Result<deriv_api_schema::PaymentagentWithdrawJustificationResponse> {
    self.send_request(&request).await
}

/// Update a contract condition.
pub async fn contract_update(&self, request: deriv_api_schema::ContractUpdateRequest) -> Result<deriv_api_schema::ContractUpdateResponse> {
    self.send_request(&request).await
}

/// This call opens a new real-money account. This call can be made from a virtual-money or a real-money account. If it is the latter, client information fields in this call will be ignored and data from your existing real-money account will be used.
pub async fn new_account_real(&self, request: deriv_api_schema::NewAccountRealRequest) -> Result<deriv_api_schema::NewAccountRealResponse> {
    self.send_request(&request).await
}

/// Retrieve information about a P2P advert.
pub async fn p_2_p_advert_info(&self, request: deriv_api_schema::P2pAdvertInfoRequest) -> Result<deriv_api_schema::P2pAdvertInfoResponse> {
    self.send_request(&request).await
}

/// Reset the password of a Trading Platform Account
pub async fn trading_platform_password_reset(&self, request: deriv_api_schema::TradingPlatformPasswordResetRequest) -> Result<deriv_api_schema::TradingPlatformPasswordResetResponse> {
    self.send_request(&request).await
}

/// Request for contract update history.
pub async fn contract_update_history(&self, request: deriv_api_schema::ContractUpdateHistoryRequest) -> Result<deriv_api_schema::ContractUpdateHistoryResponse> {
    self.send_request(&request).await
}

/// Trading and Withdrawal Limits for a given user
pub async fn get_limits(&self, request: deriv_api_schema::GetLimitsRequest) -> Result<deriv_api_schema::GetLimitsResponse> {
    self.send_request(&request).await
}

/// Retrieve advertisers has/had trade with the current advertiser.
pub async fn p_2_p_advertiser_list(&self, request: deriv_api_schema::P2pAdvertiserListRequest) -> Result<deriv_api_schema::P2pAdvertiserListResponse> {
    self.send_request(&request).await
}

/// Request P2P Settings information.
pub async fn p_2_p_settings(&self, request: deriv_api_schema::P2pSettingsRequest) -> Result<deriv_api_schema::P2pSettingsResponse> {
    self.send_request(&request).await
}

/// Will return a list of Payment Agents for a given country for a given currency. Payment agents allow users to deposit and withdraw funds using local payment methods that might not be available via the main website&#x27;s cashier system.
pub async fn paymentagent_list(&self, request: deriv_api_schema::PaymentagentListRequest) -> Result<deriv_api_schema::PaymentagentListResponse> {
    self.send_request(&request).await
}

/// Get list of MT5 accounts for client
pub async fn mt_5_login_list(&self, request: deriv_api_schema::Mt5LoginListRequest) -> Result<deriv_api_schema::Mt5LoginListResponse> {
    self.send_request(&request).await
}

/// Dispute a P2P order.
pub async fn p_2_p_order_dispute(&self, request: deriv_api_schema::P2pOrderDisputeRequest) -> Result<deriv_api_schema::P2pOrderDisputeResponse> {
    self.send_request(&request).await
}

/// Get the validations for Tax Identification Numbers (TIN)
pub async fn tin_validations(&self, request: deriv_api_schema::TinValidationsRequest) -> Result<deriv_api_schema::TinValidationsResponse> {
    self.send_request(&request).await
}

/// List all P2P payment methods.
pub async fn p_2_p_payment_methods(&self, request: deriv_api_schema::P2pPaymentMethodsRequest) -> Result<deriv_api_schema::P2pPaymentMethodsResponse> {
    self.send_request(&request).await
}

/// Creates a review for the specified order.
pub async fn p_2_p_order_review(&self, request: deriv_api_schema::P2pOrderReviewRequest) -> Result<deriv_api_schema::P2pOrderReviewResponse> {
    self.send_request(&request).await
}

/// Set User Settings (this call should be used in conjunction with &#x60;get_settings&#x60;)
pub async fn set_settings(&self, request: deriv_api_schema::SetSettingsRequest) -> Result<deriv_api_schema::SetSettingsResponse> {
    self.send_request(&request).await
}

/// List active orders.
pub async fn p_2_p_order_list(&self, request: deriv_api_schema::P2pOrderListRequest) -> Result<deriv_api_schema::P2pOrderListResponse> {
    self.send_request(&request).await
}

/// Get the list of currently available contracts for a given landing company.
pub async fn contracts_for_company(&self, request: deriv_api_schema::ContractsForCompanyRequest) -> Result<deriv_api_schema::ContractsForCompanyResponse> {
    self.send_request(&request).await
}

/// Verifies the code and returns a new code if verification is successful
pub async fn exchange_verification_code(&self, request: deriv_api_schema::ExchangeVerificationCodeRequest) -> Result<deriv_api_schema::ExchangeVerificationCodeResponse> {
    self.send_request(&request).await
}

/// Get Account Status
pub async fn get_account_status(&self, request: deriv_api_schema::GetAccountStatusRequest) -> Result<deriv_api_schema::GetAccountStatusResponse> {
    self.send_request(&request).await
}

/// To change passwords of the MT5 account.
pub async fn mt_5_password_change(&self, request: deriv_api_schema::Mt5PasswordChangeRequest) -> Result<deriv_api_schema::Mt5PasswordChangeResponse> {
    self.send_request(&request).await
}

/// This call will try to sell any expired contracts and return the number of sold contracts.
pub async fn sell_expired(&self, request: deriv_api_schema::SellExpiredRequest) -> Result<deriv_api_schema::SellExpiredResponse> {
    self.send_request(&request).await
}

/// Get All Partner Accounts (Partner account details like website, provider, company details)
pub async fn partner_accounts(&self, request: deriv_api_schema::PartnerAccountsRequest) -> Result<deriv_api_schema::PartnerAccountsResponse> {
    self.send_request(&request).await
}

/// Immediately cancel the real-time streams of messages of given type.
pub async fn forget_all(&self, request: deriv_api_schema::ForgetAllRequest) -> Result<deriv_api_schema::ForgetAllResponse> {
    self.send_request(&request).await
}

/// Request server status.
pub async fn website_status(&self, request: deriv_api_schema::WebsiteStatusRequest) -> Result<deriv_api_schema::WebsiteStatusResponse> {
    self.send_request(&request).await
}

/// Request trading platform status
pub async fn trading_platform_status(&self, request: deriv_api_schema::TradingPlatformStatusRequest) -> Result<deriv_api_schema::TradingPlatformStatusResponse> {
    self.send_request(&request).await
}

/// Confirm a P2P order.
pub async fn p_2_p_order_confirm(&self, request: deriv_api_schema::P2pOrderConfirmRequest) -> Result<deriv_api_schema::P2pOrderConfirmResponse> {
    self.send_request(&request).await
}

/// Creates a P2P chat for the specified order.
pub async fn p_2_p_chat_create(&self, request: deriv_api_schema::P2pChatCreateRequest) -> Result<deriv_api_schema::P2pChatCreateResponse> {
    self.send_request(&request).await
}

/// Retrieve a list of all available underlyings and the corresponding contract types and duration boundaries. If the user is logged in, only the assets available for that user&#x27;s landing company will be returned.
pub async fn asset_index(&self, request: deriv_api_schema::AssetIndexRequest) -> Result<deriv_api_schema::AssetIndexResponse> {
    self.send_request(&request).await
}

/// Retrieve information about a P2P advertiser.
pub async fn p_2_p_advertiser_info(&self, request: deriv_api_schema::P2pAdvertiserInfoRequest) -> Result<deriv_api_schema::P2pAdvertiserInfoResponse> {
    self.send_request(&request).await
}

/// Retrieve a list of all available underlyings and the corresponding contract types and trading duration boundaries. If the user is logged in, only the assets available for that user&#x27;s landing company will be returned.
pub async fn trading_durations(&self, request: deriv_api_schema::TradingDurationsRequest) -> Result<deriv_api_schema::TradingDurationsResponse> {
    self.send_request(&request).await
}

/// Retrieve a summary of account transactions, according to given search criteria
pub async fn statement(&self, request: deriv_api_schema::StatementRequest) -> Result<deriv_api_schema::StatementResponse> {
    self.send_request(&request).await
}

/// The company has a number of licensed subsidiaries in various jurisdictions, which are called Landing Companies (and which are wholly owned subsidiaries of the Deriv Group). This call provides information about each Landing Company.
pub async fn landing_company_details(&self, request: deriv_api_schema::LandingCompanyDetailsRequest) -> Result<deriv_api_schema::LandingCompanyDetailsResponse> {
    self.send_request(&request).await
}

/// To approve the latest version of terms and conditions.
pub async fn tnc_approval(&self, request: deriv_api_schema::TncApprovalRequest) -> Result<deriv_api_schema::TncApprovalResponse> {
    self.send_request(&request).await
}

/// Get Third Party Redirect URL for sso login.
pub async fn get_third_party_redirect(&self, request: deriv_api_schema::GetThirdPartyRedirectRequest) -> Result<deriv_api_schema::GetThirdPartyRedirectResponse> {
    self.send_request(&request).await
}

/// This call opens a new real-money account with the &#x60;maltainvest&#x60; Landing Company. This call can be made from a virtual-money account or real-money account at Deriv (Europe) Limited. If it is the latter, client information fields in this call will be ignored and data from your existing real-money account will be used.
pub async fn new_account_maltainvest(&self, request: deriv_api_schema::NewAccountMaltainvestRequest) -> Result<deriv_api_schema::NewAccountMaltainvestResponse> {
    self.send_request(&request).await
}

/// Get user account balance
pub async fn balance(&self, request: deriv_api_schema::BalanceRequest) -> Result<deriv_api_schema::BalanceResponse> {
    self.send_request(&request).await
}

/// The request for deleting an application.
pub async fn app_delete(&self, request: deriv_api_schema::AppDeleteRequest) -> Result<deriv_api_schema::AppDeleteResponse> {
    self.send_request(&request).await
}

/// Retrieves the information about a P2P order.
pub async fn p_2_p_order_info(&self, request: deriv_api_schema::P2pOrderInfoRequest) -> Result<deriv_api_schema::P2pOrderInfoResponse> {
    self.send_request(&request).await
}

/// Logout the session
pub async fn logout(&self, request: deriv_api_schema::LogoutRequest) -> Result<deriv_api_schema::LogoutResponse> {
    self.send_request(&request).await
}

/// Update a new OAuth application
pub async fn app_update(&self, request: deriv_api_schema::AppUpdateRequest) -> Result<deriv_api_schema::AppUpdateResponse> {
    self.send_request(&request).await
}

/// This call polls the state machine and returns the completion status for each step.
pub async fn partner_account_creation_status(&self, request: deriv_api_schema::PartnerAccountCreationStatusRequest) -> Result<deriv_api_schema::PartnerAccountCreationStatusResponse> {
    self.send_request(&request).await
}

/// This call sets the financial assessment details based on the client&#x27;s answers to analyze whether they possess the experience and knowledge to understand the risks involved with binary options trading.
pub async fn set_financial_assessment(&self, request: deriv_api_schema::SetFinancialAssessment) -> Result<deriv_api_schema::SetFinancialAssessmentResponse> {
    self.send_request(&request).await
}

/// Updates and returns favourite and blocked advertisers of the current user.
pub async fn p_2_p_advertiser_relations(&self, request: deriv_api_schema::P2pAdvertiserRelationsRequest) -> Result<deriv_api_schema::P2pAdvertiserRelationsResponse> {
    self.send_request(&request).await
}

/// Get KYC Authentication Status
pub async fn kyc_auth_status(&self, request: deriv_api_schema::KycAuthStatusRequest) -> Result<deriv_api_schema::KycAuthStatusResponse> {
    self.send_request(&request).await
}

/// Get MT5 user account settings
pub async fn mt_5_get_settings(&self, request: deriv_api_schema::Mt5GetSettingsRequest) -> Result<deriv_api_schema::Mt5GetSettingsResponse> {
    self.send_request(&request).await
}

/// Retrieve summary of client&#x27;s trades and account for the Reality Check facility. A &#x27;reality check&#x27; means a display of time elapsed since the session began, and associated client profit/loss. The Reality Check facility is a regulatory requirement for certain landing companies.
pub async fn reality_check(&self, request: deriv_api_schema::RealityCheckRequest) -> Result<deriv_api_schema::RealityCheckResponse> {
    self.send_request(&request).await
}

/// List all of the account&#x27;s OAuth applications
pub async fn app_list(&self, request: deriv_api_schema::AppListRequest) -> Result<deriv_api_schema::AppListResponse> {
    self.send_request(&request).await
}

/// Used for revoking access of particular app.
pub async fn revoke_oauth_app(&self, request: deriv_api_schema::RevokeOauthAppRequest) -> Result<deriv_api_schema::RevokeOauthAppResponse> {
    self.send_request(&request).await
}

/// Request back-end server epoch time.
pub async fn time(&self, request: deriv_api_schema::TimeRequest) -> Result<deriv_api_schema::TimeResponse> {
    self.send_request(&request).await
}

/// The request for cryptocurrencies configuration.
pub async fn crypto_config(&self, request: deriv_api_schema::CryptoConfigRequest) -> Result<deriv_api_schema::CryptoConfigResponse> {
    self.send_request(&request).await
}

/// Request KYC information from client
pub async fn document_upload(&self, request: deriv_api_schema::DocumentUploadRequest) -> Result<deriv_api_schema::DocumentUploadResponse> {
    self.send_request(&request).await
}

/// Verifies the email for the user using verification code passed in the request object
pub async fn confirm_email(&self, request: deriv_api_schema::ConfirmEmailRequest) -> Result<deriv_api_schema::ConfirmEmailResponse> {
    self.send_request(&request).await
}

/// The company has a number of licensed subsidiaries in various jurisdictions, which are called Landing Companies. This call will return the appropriate Landing Company for clients of a given country. The landing company may differ for derived contracts (Synthetic Indices) and Financial contracts (Forex, Stock Indices, Commodities).
pub async fn landing_company(&self, request: deriv_api_schema::LandingCompanyRequest) -> Result<deriv_api_schema::LandingCompanyResponse> {
    self.send_request(&request).await
}

/// List all my used OAuth applications.
pub async fn oauth_apps(&self, request: deriv_api_schema::OauthAppsRequest) -> Result<deriv_api_schema::OauthAppsResponse> {
    self.send_request(&request).await
}

/// Get the current estimations for cryptocurrencies. E.g. Withdrawal fee.
pub async fn crypto_estimations(&self, request: deriv_api_schema::CryptoEstimationsRequest) -> Result<deriv_api_schema::CryptoEstimations> {
    self.send_request(&request).await
}

/// Start copy trader bets
pub async fn copy_start(&self, request: deriv_api_schema::CopyStartRequest) -> Result<deriv_api_schema::CopyStartResponse> {
    self.send_request(&request).await
}

/// Gets latest price for a specific contract.
pub async fn proposal(&self, request: deriv_api_schema::ProposalRequest) -> Result<deriv_api_schema::ProposalResponse> {
    self.send_request(&request).await
}

/// Retrieve a summary of login history for user.
pub async fn login_history(&self, request: deriv_api_schema::LoginHistoryRequest) -> Result<deriv_api_schema::LoginHistoryResponse> {
    self.send_request(&request).await
}

/// This call validates the main password for the MT5 user
pub async fn mt_5_password_check(&self, request: deriv_api_schema::Mt5PasswordCheckRequest) -> Result<deriv_api_schema::Mt5PasswordCheckResponse> {
    self.send_request(&request).await
}

/// Authorize current WebSocket session to act on behalf of the owner of a given token. Must precede requests that need to access client account, for example purchasing and selling contracts or viewing portfolio.
pub async fn authorize(&self, request: deriv_api_schema::AuthorizeRequest) -> Result<deriv_api_schema::AuthorizeResponse> {
    self.send_request(&request).await
}

/// List all or specific country and its payment methods.
pub async fn p_2_p_country_list(&self, request: deriv_api_schema::P2pCountryListRequest) -> Result<deriv_api_schema::P2pCountryListResponse> {
    self.send_request(&request).await
}

/// Initiate a withdrawal to an approved Payment Agent.
pub async fn paymentagent_withdraw(&self, request: deriv_api_schema::PaymentagentWithdrawRequest) -> Result<deriv_api_schema::PaymentagentWithdrawResponse> {
    self.send_request(&request).await
}

/// Register a new OAuth application
pub async fn app_register(&self, request: deriv_api_schema::AppRegisterRequest) -> Result<deriv_api_schema::AppRegisterResponse> {
    self.send_request(&request).await
}

/// Retrieve a list of all currently active symbols (underlying markets upon which contracts are available for trading).
pub async fn active_symbols(&self, request: deriv_api_schema::ActiveSymbolsRequest) -> Result<deriv_api_schema::ActiveSymbolsResponse> {
    self.send_request(&request).await
}

/// Get historic tick data for a given symbol.
pub async fn ticks_history(&self, request: deriv_api_schema::TicksHistoryRequest) -> Result<deriv_api_schema::TicksHistoryResponse> {
    self.send_request(&request).await
}

/// This call creates new MT5 user, either demo or real money user.
pub async fn mt_5_new_account(&self, request: deriv_api_schema::Mt5NewAccountRequest) -> Result<deriv_api_schema::Mt5NewAccountResponse> {
    self.send_request(&request).await
}

/// Retrieve a list of available option payout currencies. If a user is logged in, only the currencies available for the account will be returned.
pub async fn payout_currencies(&self, request: deriv_api_schema::PayoutCurrenciesRequest) -> Result<deriv_api_schema::PayoutCurrenciesResponse> {
    self.send_request(&request).await
}

/// Receive information about my current portfolio of outstanding options
pub async fn portfolio(&self, request: deriv_api_schema::PortfolioRequest) -> Result<deriv_api_schema::PortfolioResponse> {
    self.send_request(&request).await
}

/// Stop copy trader bets
pub async fn copy_stop(&self, request: deriv_api_schema::CopyStopRequest) -> Result<deriv_api_schema::CopyStopResponse> {
    self.send_request(&request).await
}

/// Retrieves a list of active copiers and/or traders for Copy Trading
pub async fn copytrading_list(&self, request: deriv_api_schema::CopytradingListRequest) -> Result<deriv_api_schema::CopytradingListResponse> {
    self.send_request(&request).await
}

/// Retrieve details of &#x60;app_markup&#x60; according to criteria specified.
pub async fn app_markup_details(&self, request: deriv_api_schema::AppMarkupDetailsRequest) -> Result<deriv_api_schema::AppMarkupDetailsResponse> {
    self.send_request(&request).await
}

/// Get Partner Settings (Partner Type, Company Details etc)
pub async fn partner_settings(&self, request: deriv_api_schema::PartnerSettingsRequest) -> Result<deriv_api_schema::PartnerSettingsResponse> {
    self.send_request(&request).await
}

/// Gets client&#x27;s payment agent details.
pub async fn paymentagent_details(&self, request: deriv_api_schema::PaymentagentDetailsRequest) -> Result<deriv_api_schema::PaymentagentDetailsResponse> {
    self.send_request(&request).await
}

/// This call returns a list of countries and 2-letter country codes, suitable for populating the account opening form.
pub async fn residence_list(&self, request: deriv_api_schema::ResidenceListRequest) -> Result<deriv_api_schema::ResidenceListResponse> {
    self.send_request(&request).await
}

/// Immediately cancel the real-time stream of messages with a specific ID.
pub async fn forget(&self, request: deriv_api_schema::ForgetRequest) -> Result<deriv_api_schema::ForgetResponse> {
    self.send_request(&request).await
}

/// This call manages API tokens
pub async fn api_token(&self, request: deriv_api_schema::ApiTokenRequest) -> Result<deriv_api_schema::ApiTokenResponse> {
    self.send_request(&request).await
}

/// Returns all accounts belonging to the authorized user.
pub async fn account_list(&self, request: deriv_api_schema::AccountListRequest) -> Result<deriv_api_schema::AccountListResponse> {
    self.send_request(&request).await
}

/// Saves client&#x27;s payment agent details.
pub async fn paymentagent_create(&self, request: deriv_api_schema::PaymentagentCreateRequest) -> Result<deriv_api_schema::PaymentagentCreateResponse> {
    self.send_request(&request).await
}

/// Adds document information such as issuing country, id and type for identity verification processes.
pub async fn identity_verification_document_add(&self, request: deriv_api_schema::IdentityVerificationDocumentAddRequest) -> Result<deriv_api_schema::IdentityVerificationDocumentAddResponse> {
    self.send_request(&request).await
}

/// This call gets the financial assessment details. The &#x27;financial assessment&#x27; is a questionnaire that clients of certain Landing Companies need to complete, due to regulatory and KYC (know your client) requirements.
pub async fn get_financial_assessment(&self, request: deriv_api_schema::GetFinancialAssessmentRequest) -> Result<deriv_api_schema::GetFinancialAssessmentResponse> {
    self.send_request(&request).await
}

/// This call allows withdrawal from MT5 account to Binary account.
pub async fn mt_5_withdrawal(&self, request: deriv_api_schema::Mt5WithdrawalRequest) -> Result<deriv_api_schema::Mt5WithdrawalResponse> {
    self.send_request(&request).await
}

/// To get the information of the OAuth application specified by &#x27;app_id&#x27;
pub async fn app_get(&self, request: deriv_api_schema::AppGetRequest) -> Result<deriv_api_schema::AppGetResponse> {
    self.send_request(&request).await
}

/// Retrieve a summary of account Profit Table, according to given search criteria
pub async fn profit_table(&self, request: deriv_api_schema::ProfitTableRequest) -> Result<deriv_api_schema::ProfitTableResponse> {
    self.send_request(&request).await
}

/// Updates a P2P advert. Can only be used by the advertiser.
pub async fn p_2_p_advert_update(&self, request: deriv_api_schema::P2pAdvertUpdateRequest) -> Result<deriv_api_schema::P2pAdvertUpdateResponse> {
    self.send_request(&request).await
}

/// For a given symbol, get the list of currently available contracts, and the latest barrier and duration limits for each contract.
pub async fn contracts_for(&self, request: deriv_api_schema::ContractsForRequest) -> Result<deriv_api_schema::ContractsForResponse> {
    self.send_request(&request).await
}

/// Verify an email address for various purposes. The system will send an email to the address containing a security code for verification.
pub async fn verify_email(&self, request: deriv_api_schema::VerifyEmailRequest) -> Result<deriv_api_schema::VerifyEmailResponse> {
    self.send_request(&request).await
}

/// Get the list of servers for a trading platform.
pub async fn trading_servers(&self, request: deriv_api_schema::TradingServersRequest) -> Result<deriv_api_schema::TradingServersResponse> {
    self.send_request(&request).await
}

/// Create a new virtual-money account.
pub async fn new_account_virtual(&self, request: deriv_api_schema::NewAccountVirtualRequest) -> Result<deriv_api_schema::NewAccountVirtualResponse> {
    self.send_request(&request).await
}

/// Will return a list payment methods available for the given country. If the request is authenticated the client&#x27;s residence country will be used.
pub async fn payment_methods(&self, request: deriv_api_schema::PaymentMethodsRequest) -> Result<deriv_api_schema::PaymentMethodsResponse> {
    self.send_request(&request).await
}

/// Buy a Contract
pub async fn buy(&self, request: deriv_api_schema::BuyRequest) -> Result<deriv_api_schema::BuyResponse> {
    self.send_request(&request).await
}

/// Receive a list of market opening times for a given date.
pub async fn trading_times(&self, request: deriv_api_schema::TradingTimesRequest) -> Result<deriv_api_schema::TradingTimesResponse> {
    self.send_request(&request).await
}

/// Get latest price (and other information) for a contract in the user&#x27;s portfolio
pub async fn proposal_open_contract(&self, request: deriv_api_schema::ProposalOpenContractRequest) -> Result<deriv_api_schema::ProposalOpenContractResponse> {
    self.send_request(&request).await
}

/// This call allows deposit into MT5 account from Binary account.
pub async fn mt_5_deposit(&self, request: deriv_api_schema::Mt5DepositRequest) -> Result<deriv_api_schema::Mt5DepositResponse> {
    self.send_request(&request).await
}

/// Cancel a P2P order.
pub async fn p_2_p_order_cancel(&self, request: deriv_api_schema::P2pOrderCancelRequest) -> Result<deriv_api_schema::P2pOrderCancelResponse> {
    self.send_request(&request).await
}

/// This call opens a new Real-Partner Account
pub async fn new_partner_account(&self, request: deriv_api_schema::NewPartnerAccountRequest) -> Result<deriv_api_schema::NewPartnerAccountResponse> {
    self.send_request(&request).await
}

/// Retrieves the exchange rate from a base currency to a target currency supported by the system.
pub async fn exchange_rates(&self, request: deriv_api_schema::ExchangeRatesRequest) -> Result<deriv_api_schema::ExchangeRatesResponse> {
    self.send_request(&request).await
}

/// Retrieve statistics of &#x60;app_markup&#x60;.
pub async fn app_markup_statistics(&self, request: deriv_api_schema::AppMarkupStatisticsRequest) -> Result<deriv_api_schema::AppMarkupStatisticsResponse> {
    self.send_request(&request).await
}

/// Registers the client as a P2P advertiser.
pub async fn p_2_p_advertiser_create(&self, request: deriv_api_schema::P2pAdvertiserCreateRequest) -> Result<deriv_api_schema::P2pAdvertiserCreateResponse> {
    self.send_request(&request).await
}

/// Set Self-Exclusion (this call should be used in conjunction with &#x60;get_self_exclusion&#x60;)
pub async fn set_self_exclusion(&self, request: deriv_api_schema::SetSelfExclusionRequest) -> Result<deriv_api_schema::SetSelfExclusionResponse> {
    self.send_request(&request).await
}

/// Specify a currency to receive a list of events related to that specific currency. For example, specifying USD will return a list of USD-related events. If the currency is omitted, you will receive a list for all currencies.
pub async fn economic_calendar(&self, request: deriv_api_schema::EconomicCalendarRequest) -> Result<deriv_api_schema::EconomicCalendarResponse> {
    self.send_request(&request).await
}

/// Allows users to exclude themselves from the website for certain periods of time, or to set limits on their trading activities. This facility is a regulatory requirement for certain Landing Companies.
pub async fn get_self_exclusion(&self, request: deriv_api_schema::GetSelfExclusionRequest) -> Result<deriv_api_schema::GetSelfExclusionResponse> {
    self.send_request(&request).await
}

/// Set account currency, this will be default currency for your account i.e currency for trading, deposit. Please note that account currency can only be set once, and then can never be changed.
pub async fn set_account_currency(&self, request: deriv_api_schema::SetAccountCurrencyRequest) -> Result<deriv_api_schema::SetAccountCurrencyResponse> {
    self.send_request(&request).await
}
}
